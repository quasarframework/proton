# Copyright 2019-2024 Tauri Programme within The Commons Conservancy
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT
name: Build EXE for TestDriver
env:
  DEBUG: napi:*

on:
  pull_request:

jobs:
  build:
    name: build windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm explicitly
        run: |
          npm install -g pnpm
          pnpm --version  # Verify pnpm is installed and available

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          architecture: x64

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Build CLI
        run: pnpm run build:cli
        shell: bash

      - name: Build API
        run: pnpm run build:api
        shell: bash

      - name: Build API Example App
        run: |
          cd examples/api
          pnpm tauri build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-x86_64-pc-windows-msvc
          path: target\release\bundle\nsis\*
          if-no-files-found: error

      - name: Set environment variables
        run: |
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "GITHUB_RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV

      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.TESTDRIVER_API_KEY }}
          prompt: | 
            1. Click around the desktop app and verify functionality.
          prerun: |
            $headers = @{
                Authorization = "token ${{ secrets.GITHUB_TOKEN }}"
            }
            $artifactName = "bindings-x86_64-pc-windows-msvc"
            $downloadFolder = "$env:TEMP\artifact"
            $artifactZipPath = "$env:TEMP\artifact.zip"

            Write-Host "Starting artifact download process..."

            # Fetch artifact details
            Write-Host "Fetching artifact URL..."
            try {
                $artifactResponse = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/actions/runs/$env:GITHUB_RUN_ID/artifacts" -Headers $headers
                $artifact = $artifactResponse.artifacts | Where-Object { $_.name -eq $artifactName }
                
                if (-not $artifact) {
                    Write-Error "No artifact named $artifactName found!"
                    exit 1
                }

                $artifactUrl = $artifact.archive_download_url
                Write-Host "Artifact URL: $artifactUrl"
            } catch {
                Write-Error "Failed to fetch artifact URL: $_"
                exit 1
            }

            # Download the artifact
            Write-Host "Downloading artifact..."
            try {
                Invoke-WebRequest -Uri $artifactUrl -Headers $headers -OutFile $artifactZipPath
                Write-Host "Artifact downloaded to $artifactZipPath"
            } catch {
                Write-Error "Error downloading artifact: $_"
                exit 1
            }

            # Extract the artifact
            Write-Host "Extracting artifact..."
            try {
                Expand-Archive -Path $artifactZipPath -DestinationPath $downloadFolder -Force
                Write-Host "Artifact extracted to $downloadFolder"
            } catch {
                Write-Error "Failed to extract artifact: $_"
                exit 1
            }

            # Locate the .exe file dynamically
            Write-Host "Searching for an executable file..."
            $exeFile = Get-ChildItem -Path $downloadFolder -Filter *.exe -Recurse | Select-Object -First 1
            if (-not $exeFile) {
                Write-Error "No .exe file found in artifact!"
                exit 1
            }
            
            Write-Host "Executable found: $($exeFile.FullName)"

            # Run the executable
            Write-Host "Launching the application..."
            try {
                Start-Process -FilePath $exeFile.FullName
                Write-Host "Application launched successfully."
            } catch {
                Write-Error "Failed to launch application: $_"
                exit 1
            }

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COLOR: "3"
