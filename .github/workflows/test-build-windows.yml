name: Build and Test EXE for TestDriver

env:
  DEBUG: napi:*

on:
  push:
    branches: ["main"]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  build:
    name: Build Windows EXE
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          architecture: x64
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Install dependencies
        run: |
          cd examples/api
          pnpm i --frozen-lockfile --ignore-scripts
      - name: Build API Example App
        run: |
          cd examples/api
          pnpm tauri build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app
          path: examples/api/src-tauri/target/release/app.exe
          if-no-files-found: error

  testdriver_matrix:
    name: "TestDriver Matrix"
    needs: build
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        test:
          - name: "Call Log API testdriver"
            file: "testdriver/comm_call_log_api.yml"
          - name: "Call Request API testdriver"
            file: "testdriver/comm_call_request_api.yml"
          - name: "Echo testdriver"
            file: "testdriver/comm_echo.yml"
          - name: "Send Event to Rust testdriver"
            file: "testdriver/comm_send_event_rust.yml"
          - name: "Spam testdriver"
            file: "testdriver/comm_spam.yml"
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: tauri-app
          path: ${{ runner.temp }}/tauri-app
      - name: Launch Application
        shell: pwsh
        run: |
          $headers = @{
              Authorization = "token ${{ secrets.GITHUB_TOKEN }}"
          }
          $downloadFolder = "$env:TEMP\download"
          $artifactFileName = "app.exe"
          $artifactFilePath = "$downloadFolder\$artifactFileName"
          Write-Host "Starting the artifact download process..."
          if (-not (Test-Path -Path $downloadFolder)) {
              mkdir $downloadFolder
          }
          Write-Host "Fetching the artifact upload URL..."
          $artifactResponse = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" -Headers $headers
          if ($artifactResponse.artifacts.Count -gt 0) {
              $artifactUrl = $artifactResponse.artifacts[0].archive_download_url
              Write-Host "Artifact URL: $artifactUrl"
          } else {
              Write-Error "No artifacts found."
              exit 1
          }
          $artifactZipPath = "$env:TEMP\artifact.zip"
          try {
              Invoke-WebRequest -Uri $artifactUrl -Headers $headers -OutFile $artifactZipPath -MaximumRedirection 5
              Write-Host "Artifact downloaded successfully."
          } catch {
              Write-Error "Error downloading artifact: $_"
              exit 1
          }
          $artifactUnzipPath = "$env:TEMP\artifact"
          Expand-Archive -Path $artifactZipPath -DestinationPath $artifactUnzipPath -Force
          $artifactInstallerPath = Get-ChildItem -Path $artifactUnzipPath -Filter app.exe -Recurse | Select-Object -First 1
          if ($artifactInstallerPath) {
              Write-Host "Executable found: $($artifactInstallerPath.FullName)"
              Start-Process -FilePath $artifactInstallerPath.FullName
          } else {
              Write-Error "Executable not found."
              exit 1
          }
          Write-Host "Application launched."

      - name: Run TestDriver Tests
        uses: testdriverai/action@main
        with:
          key: ${{ secrets.TESTDRIVER_API_KEY }}
          prompt: |
            1. /run ${{ matrix.test.file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COLOR: "3"
