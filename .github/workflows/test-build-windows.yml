# Copyright 2019-2024 Tauri Programme within The Commons Conservancy
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT
name: Build EXE for TestDriver
env:
  DEBUG: napi:*

on:
  pull_request:

jobs:
  build:
    name: build windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - run: corepack enable

      - name: Install pnpm explicitly
        run: |
          npm install -g pnpm
          pnpm --version  # Verify pnpm is installed and available

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          architecture: x64

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Install dependencies (root)
        run: pnpm install --frozen-lockfile --ignore-scripts

      - name: Install dependencies (examples/api)
        working-directory: examples/api
        run: pnpm i

      - name: Build CLI
        run: pnpm run build:cli
        shell: bash

      - name: Build API
        run: pnpm run build:api
        shell: bash

      - name: Build API Dev App
        working-directory: examples/api
        run: pnpm tauri dev

      - name: Set environment variables
        run: |
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "GITHUB_RUN_ID=${{ github.run_id }}" >> $GITHUB_ENV

      - uses: testdriverai/action@main
        with:
          key: ${{ secrets.TESTDRIVER_API_KEY }}
          prompt: | 
            # 1. /run testdriver/tauri_api_install.yml
            # 2. /run testdriver/dark_light_mode.yml
            # 3. /run testdriver/minimize_maximize.yml
            1. /run testdriver/comm_echo.yml
            2. /run testdriver/comm_send_event_rust.yml
            3. /run testdriver/comm_spam.yml
            4. /run testdriver/comm_call_request_api.yml
            # 7. /run testdriver/comm_call_log_api.yml
            
          prerun: |
            $headers = @{
                Authorization = "token ${{ secrets.GITHUB_TOKEN }}"
            }

            $downloadFolder = "./download"
            $artifactName = "bindings-x86_64-pc-windows-msvc"
            Write-Host "Starting the artifact download process..."

            # Create the download directory if it doesn't exist
            if (-not (Test-Path -Path $downloadFolder)) {
                Write-Host "Creating download folder..."
                mkdir $downloadFolder
            } else {
                Write-Host "Download folder already exists."
            }

            # Fetch the artifact upload URL (no need for GITHUB_RUN_ID)
            Write-Host "Fetching the artifact upload URL..."
            $artifactUrl = (Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" -Headers $headers).artifacts[0].archive_download_url
            
            if ($artifactUrl) {
                Write-Host "Artifact URL successfully fetched: $artifactUrl"
            } else {
                Write-Error "Failed to fetch the artifact URL."
                exit 1
            }

            # Download the artifact (zipped file)
            Write-Host "Starting artifact download..."
            $artifactZipPath = "$env:TEMP\artifact.zip"
            try {
                Invoke-WebRequest -Uri $artifactUrl `
                    -Headers $headers `
                    -OutFile $artifactZipPath `
                    -MaximumRedirection 5
                Write-Host "Artifact downloaded successfully to $artifactZipPath"
            } catch {
                Write-Error "Error downloading artifact: $_"
                exit 1
            }

            # Unzip the artifact
            $artifactUnzipPath = "$env:TEMP\artifact"
            Write-Host "Unzipping the artifact to $artifactUnzipPath..."
            try {
                Expand-Archive -Path $artifactZipPath -DestinationPath $artifactUnzipPath -Force
                Write-Host "Artifact unzipped successfully to $artifactUnzipPath"
            } catch {
                Write-Error "Failed to unzip the artifact: $_"
                exit 1
            }

            # Find the installer or app executable
            $artifactInstallerPath = Get-ChildItem -Path $artifactUnzipPath -Filter *.exe -Recurse | Select-Object -First 1
            if ($artifactInstallerPath) {
                Write-Host "Executable file found: $($artifactInstallerPath.FullName)"
            } else {
                Write-Error "Executable file not found. Exiting."
                exit 1
            }

            # Run the installer and log the result
            # Write-Host "Running the installer: $($artifactInstallerPath.FullName)..."
            # try {
            #    Start-Process -FilePath $artifactInstallerPath.FullName
            #    Write-Host "Installer ran successfully."
            # } catch {
            #    Write-Error "Failed to run the installer: $_"
            #    exit 1
            # }

            # Ensure we are in the correct base directory before switching
            $baseDirectory = "${{ github.workspace }}"  # GitHub Actions workspace root
            Set-Location -Path $baseDirectory
              
            # Build API Dev App
            Write-Host "Building API Dev App..."
            Set-Location -Path "examples/api"
            pnpm tauri dev
            Write-Host "API Dev App built successfully."
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_COLOR: "3"
